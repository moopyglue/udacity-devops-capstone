Description: >
    Simon Wall / MoopyGlue
    This template deploys a VPC, with a pair of Public and Private subnets spread 
    across two Availabilty Zones. It deploys an Internet Gateway, with a default 
    route on the Public subnets. It deploys a pair of NAT Gateways (one in each AZ), 
    and default routes for them in the Private subnets.

Parameters:

  VpcCIDR: 
    Description: IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  Subnet1CIDR:
    Description: Subnet 1
    Type: String
    Default: 10.0.0.0/24

  Subnet2CIDR:
    Description: Subnet 2
    Type: String
    Default: 10.0.1.0/24

Resources:

#===============================================================

  VPC: 
      Type: AWS::EC2::VPC
      Properties:
          CidrBlock: !Ref VpcCIDR
          EnableDnsSupport: true
          EnableDnsHostnames: true
          
  internetGate:
      Type: AWS::EC2::InternetGateway
          
  internetGateAttach:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
          InternetGatewayId: !Ref internetGate
          VpcId: !Ref VPC

  # public routing table for vpc
  
  routeTable: # vpc routing table (initially empty)
      Type: AWS::EC2::RouteTable
      Properties: 
          VpcId: !Ref VPC

  routeDefault: # add a default rule to routing table
      Type: AWS::EC2::Route
      DependsOn: internetGateAttach
      Properties: 
          RouteTableId: !Ref routeTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref internetGate

  Subnet1: 
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 0, !GetAZs '' ]
          CidrBlock: !Ref Subnet1CIDR
          MapPublicIpOnLaunch: true

  Subnet1Route: # associate the vpc routing table with the public subnet
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref routeTable
          SubnetId: !Ref Subnet1
  
  Subnet2: 
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 1, !GetAZs '' ]
          CidrBlock: !Ref Subnet2CIDR
          MapPublicIpOnLaunch: true

  Subnet2Route: # associate the vpc routing table with the public subnet
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref routeTable
          SubnetId: !Ref Subnet2
  
#================================================================

  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
       GroupDescription: Cluster security group
       VpcId: !Ref VPC

  EKSIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  CapCluster:
        Type: AWS::EKS::Cluster
        Properties:
            Name: !Sub '${AWS::StackName}-cluster'
            Version: '1.17'
            RoleArn: !GetAtt EKSIAMRole.Arn
            ResourcesVpcConfig:
                SecurityGroupIds:
                -   !Ref ClusterSecurityGroup
                SubnetIds:
                -   !Ref Subnet1
                -   !Ref Subnet2


#================================================================

Outputs:

  Vpcid:
      Description: A reference to the software external URL for thsi cluster
      Value: !Ref VPC
      Export:
         Name: !Sub ${AWS::StackName}-vpcid

  BastionSubnet:
      Description: A reference to the software external URL for thsi cluster
      Value: !Ref Subnet1
      Export:
         Name: !Sub ${AWS::StackName}-hub-subnet

  PubSubnetIds:
    Description: Subnets IDs in the VPC
    Value: !Join [ ",", [ !Ref Subnet1, !Ref Subnet2 ] ]
    Export:
       Name: !Sub ${AWS::StackName}-pubsubnets

  ClusterName:
    Description: Name of the cluster
    Value: !Sub '${AWS::StackName}-cluster'
    Export:
       Name: !Sub '${AWS::StackName}-cluster'

  SecurityGroups:
    Description: Security group for the cluster control plane communication with worker nodes
    Value: !Join [ ",", [ !Ref ClusterSecurityGroup ] ]
    Export:
       Name: !Sub '${AWS::StackName}-secgroups'

  EKS:
        Description: EKS Cluster
        Value: !Ref CapCluster
        Export:
            Name: !Sub '${AWS::StackName}-eks'

  EKSEndpoint:
        Value: !GetAtt CapCluster.Endpoint
        Description: Cluster Endpoint
        Export:
            Name: !Sub '${AWS::StackName}-eks-endpoint'

