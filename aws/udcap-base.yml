Description: >
    Simon Wall / MoopyGlue
    This template deploys a VPC, with a pair of Public and Private subnets spread 
    across two Availabilty Zones. It deploys an Internet Gateway, with a default 
    route on the Public subnets. It deploys a pair of NAT Gateways (one in each AZ), 
    and default routes for them in the Private subnets.

Parameters:

  #=============================================================
  #  Parameters (all start param* )
  #=============================================================

  paramVpcCIDR: 
    Description: IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  paramAZ1PubSubCIDR:
    Description: Avail zone 1 - Public Subnet CIDR
    Type: String
    Default: 10.0.0.0/24

  paramAZ2PubSubCIDR:
    Description: Avail zone 2 - Public Subnet CIDR
    Type: String
    Default: 10.0.1.0/24

  paramAZ1PrivSubCIDR:
    Description: Avail zone 1 - Private Subnet CIDR
    Type: String
    Default: 10.0.2.0/24

  paramAZ2PrivSubCIDR:
    Description: Avail zone 2 - Private Subnet CIDR
    Type: String
    Default: 10.0.3.0/24


Resources:

  # _____________________________ N E T W O R K _______________________________

  #===============================================================
  #  VPC network - does not reference subnets or availability Zones
  #===============================================================

  vpcMain: 
      Type: AWS::EC2::VPC
      Properties:
          CidrBlock: !Ref paramVpcCIDR
          EnableDnsSupport: true
          EnableDnsHostnames: true
          
  internetGate:
      Type: AWS::EC2::InternetGateway
          
  internetGateAttach:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
          InternetGatewayId: !Ref internetGate
          VpcId: !Ref vpcMain

  # public routing table for vpc
  
  vpcPubRouteTable: # vpc routing table (initially empty)
      Type: AWS::EC2::RouteTable
      Properties: 
          VpcId: !Ref vpcMain

  vpcPubRouteDefault: # add a default rule to routing table
      Type: AWS::EC2::Route
      DependsOn: internetGateAttach
      Properties: 
          RouteTableId: !Ref vpcPubRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref internetGate

  #===============================================================
  # Availability zone 1 - all network config
  #===============================================================

  AZ1PubSub: 
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref vpcMain
          AvailabilityZone: !Select [ 0, !GetAZs '' ]
          CidrBlock: !Ref paramAZ1PubSubCIDR
          MapPublicIpOnLaunch: true

  AZ1PrivSub: 
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref vpcMain
          AvailabilityZone: !Select [ 0, !GetAZs '' ]
          CidrBlock: !Ref paramAZ1PrivSubCIDR
          MapPublicIpOnLaunch: false

  # AZ1 - nat gateway

  AZ1NatEIP:
      Type: AWS::EC2::EIP
      DependsOn: internetGateAttach
      Properties: 
          Domain: vpc

  AZ1NatGate: 
      Type: AWS::EC2::NatGateway
      Properties: 
          AllocationId: !GetAtt AZ1NatEIP.AllocationId
          SubnetId: !Ref AZ1PubSub

  # AZ1 public subnet uses vpc public routing

  AZ1PubSubRouteTableAssociation: # associate the vpc routing table with the public subnet
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref vpcPubRouteTable
          SubnetId: !Ref AZ1PubSub
  
  # AZ1 private subnet creates own routing
  # connecting private subnet with internet through NAT gateway

  AZ1PrivSubRouteTable:  # create private subnet routing table (initially empty)
      Type: AWS::EC2::RouteTable
      Properties: 
          VpcId: !Ref vpcMain

  AZ1PrivSubRouteDefault: # now add a default rule to routing table 
      Type: AWS::EC2::Route
      Properties:
          RouteTableId: !Ref AZ1PrivSubRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref AZ1NatGate

  AZ1PrivSubRouteTableAssociation: # finally associate the routing table with a subnet
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref AZ1PrivSubRouteTable
          SubnetId: !Ref AZ1PrivSub

  #===============================================================
  # Availability zone 2 - all network config
  #===============================================================

  AZ2PubSub: 
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref vpcMain
          AvailabilityZone: !Select [ 1, !GetAZs '' ]
          CidrBlock: !Ref paramAZ2PubSubCIDR
          MapPublicIpOnLaunch: true

  AZ2PrivSub: 
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref vpcMain
          AvailabilityZone: !Select [ 1, !GetAZs '' ]
          CidrBlock: !Ref paramAZ2PrivSubCIDR
          MapPublicIpOnLaunch: false

  # AZ2 - nat gateway

  AZ2NatEIP:
      Type: AWS::EC2::EIP
      DependsOn: internetGateAttach
      Properties: 
          Domain: vpc

  AZ2NatGate: 
      Type: AWS::EC2::NatGateway
      Properties: 
          AllocationId: !GetAtt AZ2NatEIP.AllocationId
          SubnetId: !Ref AZ2PubSub

  # AZ2 public subnet uses vpc public routing

  AZ2PubSubRouteTableAssociation: # associate the vpc routing table with the public subnet
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref vpcPubRouteTable
          SubnetId: !Ref AZ2PubSub
  
  # AZ2 private subnet creates own routing
  # connecting private subnet with internet through NAT gateway

  AZ2PrivSubRouteTable: # create private subnet routing table (initially empty)
      Type: AWS::EC2::RouteTable
      Properties: 
          VpcId: !Ref vpcMain

  AZ2PrivSubRouteDefault: # now add a default rule to routing table 
      Type: AWS::EC2::Route
      Properties:
          RouteTableId: !Ref AZ2PrivSubRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref AZ2NatGate

  AZ2PrivSubRouteTableAssociation: # finally associate the routing table with a subnet
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref AZ2PrivSubRouteTable
          SubnetId: !Ref AZ2PrivSub


#================================================================

  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
       GroupDescription: Cluster security group
       VpcId: !Ref vpcMain
       SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 6000   # http access to server from externally
            ToPort:   6600
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp  # ssh access to host from bastion host
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
       SecurityGroupEgress:
          - IpProtocol: tcp # open all ports for external access
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0

  EKSIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  CapCluster:
        Type: AWS::EKS::Cluster
        Properties:
            Name: !Sub '${AWS::StackName}-cluster'
            Version: '1.15'
            RoleArn: !GetAtt EKSIAMRole.Arn
            ResourcesVpcConfig:
                SecurityGroupIds:
                -   !Ref ClusterSecurityGroup
                SubnetIds:
                -   !Ref AZ1PrivSub
                -   !Ref AZ2PrivSub


#================================================================

Outputs:

  Vpcid:
      Description: A reference to the software external URL for thsi cluster
      Value: !Ref vpcMain
      Export:
         Name: !Sub ${AWS::StackName}-vpcid

  BastionSubnet:
      Description: A reference to the software external URL for thsi cluster
      Value: !Ref AZ1PubSub
      Export:
         Name: !Sub ${AWS::StackName}-bastion-subnet

  PrivSubnetIds:
    Description: Subnets IDs in the VPC
    Value: !Join [ ",", [ !Ref AZ1PrivSub, !Ref AZ2PrivSub ] ]
    Export:
       Name: !Sub ${AWS::StackName}-privsubnets

  PubSubnetIds:
    Description: Subnets IDs in the VPC
    Value: !Join [ ",", [ !Ref AZ1PubSub, !Ref AZ2PubSub ] ]
    Export:
       Name: !Sub ${AWS::StackName}-pubsubnets

  ClusterName:
    Description: Name of the cluster
    Value: !Sub '${AWS::StackName}-cluster'
    Export:
       Name: !Sub '${AWS::StackName}-cluster'

  SecurityGroups:
    Description: Security group for the cluster control plane communication with worker nodes
    Value: !Join [ ",", [ !Ref ClusterSecurityGroup ] ]
    Export:
       Name: !Sub '${AWS::StackName}-secgroups'

  EKS:
        Description: EKS Cluster
        Value: !Ref CapCluster
        Export:
            Name: !Sub '${AWS::StackName}-eks'

  EKSEndpoint:
        Value: !GetAtt CapCluster.Endpoint
        Description: Cluster Endpoint
        Export:
            Name: !Sub '${AWS::StackName}-eks-endpoint'

